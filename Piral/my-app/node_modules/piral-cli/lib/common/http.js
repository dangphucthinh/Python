"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postFile = exports.downloadFile = exports.getHashFromUrl = void 0;
const path_1 = require("path");
const https_1 = require("https");
const os_1 = require("os");
const fs_1 = require("fs");
const log_1 = require("./log");
const hash_1 = require("./hash");
const external_1 = require("../external");
const os = (0, os_1.platform)();
const standardHeaders = {
    'user-agent': `piral-cli/http.node-${os}`,
};
function getMessage(body) {
    if (typeof body === 'string') {
        try {
            const content = JSON.parse(body);
            return content.message;
        }
        catch (ex) {
            return body;
        }
    }
    else if (body && typeof body === 'object') {
        if ('message' in body) {
            return body.message;
        }
        else {
            return JSON.stringify(body);
        }
    }
    return '';
}
function streamToFile(source, target) {
    const dest = (0, fs_1.createWriteStream)(target);
    return new Promise((resolve, reject) => {
        source.pipe(dest);
        source.on('error', (err) => reject(err));
        dest.on('finish', () => resolve([target]));
    });
}
function getHashFromUrl(target) {
    return external_1.axios.default
        .get(target, {
        responseType: 'arraybuffer',
        headers: standardHeaders,
    })
        .then((res) => {
        (0, log_1.log)('generalDebug_0003', `Received the contents from "${target}" (status: ${res.status}).`);
        return (0, hash_1.computeHash)(res.data);
    });
}
exports.getHashFromUrl = getHashFromUrl;
function downloadFile(target, ca) {
    const httpsAgent = ca ? new https_1.Agent({ ca }) : undefined;
    return external_1.axios.default
        .get(target, {
        responseType: 'stream',
        headers: standardHeaders,
        httpsAgent,
    })
        .then((res) => {
        const rid = Math.random().toString(36).split('.').pop();
        const target = (0, path_1.join)((0, os_1.tmpdir)(), `pilet_${rid}.tgz`);
        (0, log_1.log)('generalDebug_0003', `Writing the downloaded file to "${target}".`);
        return streamToFile(res.data, target);
    })
        .catch((error) => {
        (0, log_1.log)('failedHttpGet_0068', error.message);
        return [];
    });
}
exports.downloadFile = downloadFile;
function postFile(target, key, file, fields = {}, ca) {
    const form = new external_1.FormData();
    const httpsAgent = ca ? new https_1.Agent({ ca }) : undefined;
    Object.keys(fields).forEach((key) => form.append(key, fields[key]));
    form.append('file', file, 'pilet.tgz');
    const headers = Object.assign(Object.assign({}, form.getHeaders()), standardHeaders);
    if (key) {
        headers.authorization = `Basic ${key}`;
    }
    return external_1.axios.default
        .post(target, form, {
        headers,
        httpsAgent,
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
    })
        .then((res) => ({
        status: res.status,
        success: true,
        response: res.data,
    }), (error) => {
        var _a;
        if (error.response) {
            // The request was made and the server responded with a status code
            // that falls out of the range of 2xx
            const { data, statusText, status } = error.response;
            const message = getMessage(data) || '';
            (0, log_1.log)('unsuccessfulHttpPost_0066', statusText, status, message);
            return {
                status,
                success: false,
                response: message,
            };
        }
        else if (error.isAxiosError) {
            // axios initiated error: try to parse message from error object
            let errorMessage = error.errno || 'Unknown Axios Error';
            if (typeof error.toJSON === 'function') {
                const errorObj = error.toJSON();
                errorMessage = (_a = errorObj === null || errorObj === void 0 ? void 0 : errorObj.message) !== null && _a !== void 0 ? _a : errorMessage;
            }
            (0, log_1.log)('failedHttpPost_0065', errorMessage);
            return {
                status: 500,
                success: false,
                response: errorMessage,
            };
        }
        else if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
            // http.ClientRequest in node.js
            (0, log_1.log)('failedHttpPost_0065', error.request);
        }
        else {
            // Something happened in setting up the request that triggered an Error
            (0, log_1.log)('failedHttpPost_0065', error.message);
        }
        return {
            status: 500,
            success: false,
            response: undefined,
        };
    });
}
exports.postFile = postFile;
//# sourceMappingURL=http.js.map