"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withApi = void 0;
const React = require("react");
const piral_base_1 = require("piral-base");
const react_router_1 = require("react-router");
const components_1 = require("../components");
const hooks_1 = require("../hooks");
const utils_1 = require("../utils");
// this is an arbitrary start number to have 6 digits
let portalIdBase = 123456;
const DefaultWrapper = (props) => (0, utils_1.defaultRender)(props.children);
class ForeignComponentContainer extends React.Component {
    constructor() {
        super(...arguments);
        this.handler = (ev) => {
            const { innerProps } = this.props;
            ev.stopPropagation();
            innerProps.piral.renderHtmlExtension(ev.detail.target, ev.detail.props);
        };
        this.setNode = (node) => {
            this.current = node;
        };
    }
    componentDidMount() {
        const node = this.current;
        const { $component, $context, innerProps } = this.props;
        const { mount } = $component;
        if (node && (0, piral_base_1.isfunc)(mount)) {
            mount(node, innerProps, $context);
            node.addEventListener('render-html', this.handler, false);
        }
        this.previous = node;
    }
    componentDidUpdate() {
        const { current, previous } = this;
        const { $component, $context, innerProps } = this.props;
        const { update } = $component;
        if (current !== previous) {
            previous && this.componentWillUnmount();
            current && this.componentDidMount();
        }
        else if ((0, piral_base_1.isfunc)(update)) {
            update(current, innerProps, $context);
        }
    }
    componentWillUnmount() {
        const node = this.previous;
        const { $component } = this.props;
        const { unmount } = $component;
        if (node && (0, piral_base_1.isfunc)(unmount)) {
            unmount(node);
            node.removeEventListener('render-html', this.handler, false);
        }
        this.previous = undefined;
    }
    render() {
        const { $portalId } = this.props;
        return React.createElement("div", { "data-portal-id": $portalId, ref: this.setNode });
    }
}
function wrapReactComponent(Component, stasisOptions, piral, Wrapper) {
    return (props) => (React.createElement(Wrapper, Object.assign({}, props, { piral: piral }),
        React.createElement(components_1.ErrorBoundary, Object.assign({}, stasisOptions, { renderProps: props }),
            React.createElement(Component, Object.assign({}, props, { piral: piral })))));
}
function wrapForeignComponent(component, stasisOptions, piral, Wrapper) {
    return React.memo((props) => {
        const { destroyPortal } = (0, hooks_1.useActions)();
        const { state, readState } = (0, hooks_1.useGlobalStateContext)();
        const router = React.useContext(react_router_1.__RouterContext);
        const id = React.useMemo(() => (portalIdBase++).toString(26), utils_1.none);
        const context = React.useMemo(() => ({ router, state, readState }), [router, state]);
        const innerProps = React.useMemo(() => (Object.assign(Object.assign({}, props), { piral })), [props]);
        React.useEffect(() => () => destroyPortal(id), utils_1.none);
        return (React.createElement(Wrapper, Object.assign({}, innerProps),
            React.createElement(components_1.ErrorBoundary, Object.assign({}, stasisOptions, { renderProps: props }),
                React.createElement(components_1.PortalRenderer, { id: id }),
                React.createElement(ForeignComponentContainer, { innerProps: innerProps, "$portalId": id, "$component": component, "$context": context }))));
    });
}
function isNotExotic(component) {
    return !component.$$typeof;
}
function wrapComponent(converters, component, piral, Wrapper, stasisOptions) {
    if (!component) {
        console.error('The given value is not a valid component.');
        // tslint:disable-next-line:no-null-keyword
        component = () => null;
    }
    if (typeof component === 'object' && isNotExotic(component)) {
        const result = (0, utils_1.convertComponent)(converters[component.type], component);
        return wrapForeignComponent(result, stasisOptions, piral, Wrapper);
    }
    return wrapReactComponent(component, stasisOptions, piral, Wrapper);
}
function getWrapper(wrappers, wrapperType) {
    return wrappers[wrapperType] || wrappers['*'] || DefaultWrapper;
}
function withApi(context, component, piral, errorType, wrapperType = errorType) {
    const converters = context.converters;
    const Wrapper = context.readState((m) => getWrapper(m.registry.wrappers, wrapperType));
    return wrapComponent(converters, component, piral, Wrapper, {
        onError(error) {
            console.error(piral, error);
        },
        renderChild(child) {
            return React.createElement(React.Suspense, { fallback: React.createElement(components_1.PiralLoadingIndicator, null) }, child);
        },
        renderError(error, props) {
            return React.createElement(components_1.PiralError, Object.assign({ type: errorType, error: error }, props));
        },
    });
}
exports.withApi = withApi;
//# sourceMappingURL=withApi.js.map