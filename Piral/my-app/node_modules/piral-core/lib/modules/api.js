"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultApiFactory = exports.createExtenders = exports.createCoreApi = void 0;
const piral_base_1 = require("piral-base");
const state_1 = require("../state");
const components_1 = require("../components");
const utils_1 = require("../utils");
if (typeof window !== 'undefined' && 'customElements' in window) {
    class PiralExtension extends HTMLElement {
        constructor() {
            super(...arguments);
            this.dispose = utils_1.noop;
            this.update = utils_1.noop;
        }
        getProps() {
            const name = this.getAttribute('name');
            const params = (0, utils_1.tryParseJson)(this.getAttribute('params'));
            return { name, params };
        }
        connectedCallback() {
            if (this.isConnected) {
                this.dispatchEvent(new CustomEvent('render-html', {
                    bubbles: true,
                    detail: {
                        target: this,
                        props: this.getProps(),
                    },
                }));
            }
        }
        disconnectedCallback() {
            this.dispose();
            this.dispose = utils_1.noop;
            this.update = utils_1.noop;
        }
        attributeChangedCallback() {
            this.update(this.getProps());
        }
        static get observedAttributes() {
            return ['name', 'params'];
        }
    }
    customElements.define('piral-extension', PiralExtension);
}
function render(context, element, props) {
    let [id, portal] = (0, utils_1.renderInDom)(context, element, components_1.ExtensionSlot, props);
    const dispose = () => context.hidePortal(id, portal);
    const update = (newProps) => {
        [id, portal] = (0, utils_1.changeDomPortal)(id, portal, context, element, components_1.ExtensionSlot, newProps);
    };
    return [dispose, update];
}
function createCoreApi(context) {
    if (typeof document !== 'undefined') {
        document.body.addEventListener('render-html', (ev) => {
            ev.stopPropagation();
            const container = ev.detail.target;
            const [dispose, update] = render(context, container, ev.detail.props);
            container.dispose = dispose;
            container.update = update;
        }, false);
    }
    return (api, target) => {
        const pilet = target.name;
        return {
            getData(name) {
                return context.readDataValue(name);
            },
            setData(name, value, options) {
                const { target = 'memory', expires } = (0, utils_1.createDataOptions)(options);
                const expiration = (0, utils_1.getDataExpiration)(expires);
                return context.tryWriteDataItem(name, value, pilet, target, expiration);
            },
            registerPage(route, arg, meta) {
                context.registerPage(route, {
                    pilet,
                    meta,
                    component: (0, state_1.withApi)(context, arg, api, 'page'),
                });
                return () => api.unregisterPage(route);
            },
            unregisterPage(route) {
                context.unregisterPage(route);
            },
            registerExtension(name, arg, defaults) {
                context.registerExtension(name, {
                    pilet,
                    component: (0, state_1.withApi)(context, arg, api, 'extension'),
                    reference: arg,
                    defaults,
                });
                return () => api.unregisterExtension(name, arg);
            },
            unregisterExtension(name, arg) {
                context.unregisterExtension(name, arg);
            },
            renderHtmlExtension(element, props) {
                const [dispose] = render(context, element, props);
                return dispose;
            },
            Extension: components_1.ExtensionSlot,
        };
    };
}
exports.createCoreApi = createCoreApi;
function createExtenders(context, apis) {
    const creators = [createCoreApi, ...apis.filter(piral_base_1.isfunc)];
    return creators.map((c) => {
        const ctx = c(context);
        if ((0, piral_base_1.isfunc)(ctx)) {
            return ctx;
        }
        else {
            return () => (Object.assign({}, ctx));
        }
    });
}
exports.createExtenders = createExtenders;
function defaultApiFactory(context, apis) {
    const extenders = createExtenders(context, apis);
    return (target) => {
        const api = (0, piral_base_1.initializeApi)(target, context);
        context.apis[target.name] = api;
        return (0, piral_base_1.mergeApis)(api, extenders, target);
    };
}
exports.defaultApiFactory = defaultApiFactory;
//# sourceMappingURL=api.js.map