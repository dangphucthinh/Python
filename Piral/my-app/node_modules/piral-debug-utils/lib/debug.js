"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPiralDebug = void 0;
const DebugTracker_1 = require("./DebugTracker");
const VisualizationWrapper_1 = require("./VisualizationWrapper");
const ExtensionCatalogue_1 = require("./ExtensionCatalogue");
const decycle_1 = require("./decycle");
const state_1 = require("./state");
function installPiralDebug(options) {
    const { injectPilet, getGlobalState, getExtensions, getDependencies, getRoutes, getPilets, setPilets, fireEvent, integrate, createApi, loadPilet, customSettings = {}, } = options;
    const events = [];
    const legacyBrowser = !new Error().stack;
    const excludedRoutes = [state_1.initialSettings.cataloguePath];
    const selfSource = 'piral-debug-api';
    const debugApiVersion = 'v1';
    const settings = Object.assign(Object.assign({}, customSettings), { viewState: {
            value: state_1.initialSettings.viewState,
            type: 'boolean',
            label: 'State container logging',
            onChange(value) {
                sessionStorage.setItem('dbg:view-state', value ? 'on' : 'off');
            },
        }, loadPilets: {
            value: state_1.initialSettings.loadPilets,
            type: 'boolean',
            label: 'Load available pilets',
            onChange(value) {
                sessionStorage.setItem('dbg:load-pilets', value ? 'on' : 'off');
            },
        }, hardRefresh: {
            value: state_1.initialSettings.hardRefresh,
            type: 'boolean',
            label: 'Full refresh on change',
            onChange(value) {
                sessionStorage.setItem('dbg:hard-refresh', value ? 'on' : 'off');
            },
        }, viewOrigins: {
            value: state_1.initialSettings.viewOrigins,
            type: 'boolean',
            label: 'Visualize component origins',
            onChange(value, prev) {
                sessionStorage.setItem('dbg:view-origins', value ? 'on' : 'off');
                if (prev !== value) {
                    updateVisualize(value);
                }
            },
        }, extensionCatalogue: {
            value: state_1.initialSettings.extensionCatalogue,
            type: 'boolean',
            label: 'Enable extension catalogue',
            onChange(value) {
                sessionStorage.setItem('dbg:extension-catalogue', value ? 'on' : 'off');
            },
        } });
    const sendMessage = (content) => {
        window.postMessage({
            content,
            source: selfSource,
            version: debugApiVersion,
        }, '*');
    };
    const getSettings = () => {
        return Object.keys(settings).reduce((obj, key) => {
            const setting = settings[key];
            if (setting &&
                typeof setting === 'object' &&
                typeof setting.label === 'string' &&
                typeof setting.type === 'string' &&
                ['boolean', 'string', 'number'].includes(typeof setting.value)) {
                obj[key] = {
                    label: setting.label,
                    value: setting.value,
                    type: setting.type,
                };
            }
            return obj;
        }, {});
    };
    const updateSettings = (values) => {
        Object.keys(values).forEach((key) => {
            const setting = settings[key];
            switch (setting.type) {
                case 'boolean': {
                    const prev = setting.value;
                    const value = values[key];
                    setting.value = value;
                    setting.onChange(value, prev);
                    break;
                }
                case 'number': {
                    const prev = setting.value;
                    const value = values[key];
                    setting.value = value;
                    setting.onChange(value, prev);
                    break;
                }
                case 'string': {
                    const prev = setting.value;
                    const value = values[key];
                    setting.value = value;
                    setting.onChange(value, prev);
                    break;
                }
            }
        });
        sendMessage({
            settings: getSettings(),
            type: 'settings',
        });
    };
    const togglePilet = (name) => {
        const pilet = getPilets().find((m) => m.name === name);
        if (pilet.disabled) {
            try {
                const { createApi } = options;
                const newApi = createApi(pilet);
                injectPilet(pilet.original);
                pilet.original.setup(newApi);
            }
            catch (error) {
                console.error(error);
            }
        }
        else {
            injectPilet({ name, disabled: true, original: pilet });
        }
    };
    const removePilet = (name) => {
        const pilets = getPilets().filter((m) => m.name !== name);
        injectPilet({ name });
        setPilets(pilets);
    };
    const appendPilet = (meta) => {
        const { createApi, loadPilet } = options;
        loadPilet(meta).then((pilet) => {
            try {
                const newApi = createApi(pilet);
                injectPilet(pilet);
                pilet.setup(newApi);
            }
            catch (error) {
                console.error(error);
            }
        });
    };
    const toggleVisualize = () => {
        (0, state_1.setState)((s) => (Object.assign(Object.assign({}, s), { visualize: Object.assign(Object.assign({}, s.visualize), { force: !s.visualize.force }) })));
    };
    const updateVisualize = (active) => {
        (0, state_1.setState)((s) => (Object.assign(Object.assign({}, s), { visualize: Object.assign(Object.assign({}, s.visualize), { active }) })));
    };
    const goToRoute = (path, state) => {
        (0, state_1.setState)((s) => (Object.assign(Object.assign({}, s), { route: {
                path,
                state,
            } })));
    };
    const eventDispatcher = document.body.dispatchEvent;
    const debugApi = {
        debug: debugApiVersion,
        instance: {
            name: process.env.BUILD_PCKG_NAME,
            version: process.env.BUILD_PCKG_VERSION,
            dependencies: process.env.SHARED_DEPENDENCIES,
        },
        build: {
            date: process.env.BUILD_TIME_FULL,
            cli: process.env.PIRAL_CLI_VERSION,
            compat: process.env.DEBUG_PIRAL,
        },
        pilets: {
            loadPilet,
            createApi,
        },
    };
    const start = () => {
        const container = (0, decycle_1.decycle)(getGlobalState());
        const routes = getRoutes().filter((r) => !excludedRoutes.includes(r));
        const extensions = getExtensions();
        const settings = getSettings();
        const dependencies = getDependencies();
        const pilets = getPilets().map((pilet) => ({
            name: pilet.name,
            version: pilet.version,
            disabled: pilet.disabled,
        }));
        sendMessage({
            type: 'available',
            name: debugApi.instance.name,
            version: debugApi.instance.version,
            kind: debugApiVersion,
            mode: process.env.NODE_ENV === 'production' ? 'production' : 'development',
            capabilities: ['events', 'container', 'routes', 'pilets', 'settings', 'extensions', 'dependencies'],
            state: {
                routes,
                pilets,
                container,
                settings,
                events,
                extensions,
                dependencies,
            },
        });
    };
    document.body.dispatchEvent = function (ev) {
        if (ev.type.startsWith('piral-')) {
            events.unshift({
                id: events.length.toString(),
                name: ev.type.replace('piral-', ''),
                args: (0, decycle_1.decycle)(ev.detail.arg),
                time: Date.now(),
            });
            sendMessage({
                events,
                type: 'events',
            });
        }
        return eventDispatcher.call(this, ev);
    };
    window.addEventListener('storage', (event) => {
        if (!legacyBrowser && event.storageArea === sessionStorage) {
            // potentially unknowingly updated settings
            updateSettings({
                viewState: sessionStorage.getItem('dbg:view-state') !== 'off',
                loadPilets: sessionStorage.getItem('dbg:load-pilets') === 'on',
                hardRefresh: sessionStorage.getItem('dbg:hard-refresh') === 'on',
                viewOrigins: sessionStorage.getItem('dbg:view-origins') === 'on',
                extensionCatalogue: sessionStorage.getItem('dbg:extension-catalogue') !== 'off',
            });
        }
    });
    window.addEventListener('message', (event) => {
        const { source, version, content } = event.data;
        if (source !== selfSource && version === debugApiVersion) {
            switch (content.type) {
                case 'init':
                    return start();
                case 'update-settings':
                    return updateSettings(content.settings);
                case 'append-pilet':
                    return appendPilet(content.meta);
                case 'remove-pilet':
                    return removePilet(content.name);
                case 'toggle-pilet':
                    return togglePilet(content.name);
                case 'emit-event':
                    return fireEvent(content.name, content.args);
                case 'goto-route':
                    return goToRoute(content.route, content.state);
                case 'visualize-all':
                    return toggleVisualize();
            }
        }
    });
    integrate({
        components: {
            Debug: DebugTracker_1.DebugTracker,
        },
        routes: {
            [state_1.initialSettings.cataloguePath]: ExtensionCatalogue_1.ExtensionCatalogue,
        },
        wrappers: {
            '*': VisualizationWrapper_1.VisualizationWrapper,
        },
        onChange(previous, current, changed) {
            if (changed.state) {
                if (settings.viewState.value) {
                    if (!legacyBrowser) {
                        // Chrome, Firefox, ... (full capability)
                        const err = new Error();
                        const lastLine = err.stack.split('\n')[7];
                        if (lastLine) {
                            const action = lastLine.replace(/^\s+at\s+(Atom\.|Object\.)?/, '');
                            console.group(`%c Piral State Change %c ${new Date().toLocaleTimeString()}`, 'color: gray; font-weight: lighter;', 'color: black; font-weight: bold;');
                            console.log('%c Previous', `color: #9E9E9E; font-weight: bold`, previous);
                            console.log('%c Action', `color: #03A9F4; font-weight: bold`, action);
                            console.log('%c Next', `color: #4CAF50; font-weight: bold`, current);
                            console.groupEnd();
                        }
                    }
                    else {
                        // IE 11, ... (does not know colors etc.)
                        console.log('Changed state', previous, current);
                    }
                }
                sendMessage({
                    type: 'container',
                    container: (0, decycle_1.decycle)(getGlobalState()),
                });
            }
            if (changed.pilets) {
                sendMessage({
                    type: 'pilets',
                    pilets: getPilets().map((pilet) => ({
                        name: pilet.name,
                        version: pilet.version,
                        disabled: !!pilet.disabled,
                    })),
                });
            }
            if (changed.pages) {
                sendMessage({
                    type: 'routes',
                    routes: getRoutes().filter((r) => !excludedRoutes.includes(r)),
                });
            }
            if (changed.extensions) {
                sendMessage({
                    type: 'extensions',
                    extensions: getExtensions(),
                });
            }
            if (changed.dependencies) {
                sendMessage({
                    type: 'dependencies',
                    dependencies: getDependencies(),
                });
            }
        },
    });
    window['dbg:piral'] = debugApi;
    start();
}
exports.installPiralDebug = installPiralDebug;
//# sourceMappingURL=debug.js.map