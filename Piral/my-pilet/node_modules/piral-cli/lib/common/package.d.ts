import { SourceLanguage, ForceOverwrite } from './enums';
import { Framework, FileInfo, PiletsInfo, TemplateFileLocation, SharedDependency } from '../types';
export declare function getPiralPath(root: string, name: string): string;
export declare function findPackageRoot(pck: string, baseDir: string): string;
export declare function readPiralPackage(root: string, name: string): Promise<any>;
export declare function getPiralPackage(app: string, language: SourceLanguage, version: string, framework: Framework, bundler?: string): {
    app: string;
    scripts: {
        start: string;
        build: string;
    };
    pilets: PiletsInfo;
    dependencies: {
        [x: string]: string;
    };
    devDependencies: {
        'piral-cli': string;
    };
};
export declare function getFileStats(root: string, name: string, fileMap?: Array<TemplateFileLocation>): Promise<{
    path: string;
    hash: string;
    changed: boolean;
}[]>;
export declare function copyScaffoldingFiles(source: string, target: string, files: Array<string | TemplateFileLocation>, piralInfo?: any, variables?: Record<string, string>): Promise<void>;
export declare function copyPiralFiles(root: string, name: string, piralInfo: any, forceOverwrite: ForceOverwrite, variables: Record<string, string>, originalFiles?: Array<FileInfo>): Promise<void>;
export declare function getPiletsInfo(piralInfo: any): PiletsInfo;
export declare function retrievePiralRoot(baseDir: string, entry: string): Promise<string>;
export declare function findDependencyVersion(pckg: Record<string, any>, rootPath: string, packageName: string): Promise<string>;
export declare function findPackageVersion(rootPath: string, packageName: string): Promise<string>;
export declare function retrievePiletsInfo(entryFile: string): Promise<{
    externals: string[];
    name: any;
    version: any;
    dependencies: {
        std: any;
        dev: any;
        peer: any;
    };
    scripts: any;
    ignored: any[];
    root: string;
    files: (string | TemplateFileLocation)[];
    devDependencies: Record<string, string | true>;
    validators: Record<string, any>;
    packageOverrides: Record<string, any>;
    preScaffold: string;
    postScaffold: string;
    preUpgrade: string;
    postUpgrade: string;
}>;
export declare function isValidDependency(name: string): boolean;
export declare function patchPiletPackage(root: string, name: string, version: string, piralInfo: any, fromEmulator: boolean, newInfo?: {
    language: SourceLanguage;
    bundler: string;
}): Promise<void>;
/**
 * Returns true if its an emulator package, otherwise it has to be a "raw" app shell.
 */
export declare function checkAppShellPackage(appPackage: any): boolean;
export declare function readImportmap(dir: string, packageDetails: any): Promise<SharedDependency[]>;
export declare function retrievePiletData(target: string, app?: string): Promise<{
    dependencies: any;
    devDependencies: any;
    peerDependencies: any;
    peerModules: any;
    ignored: any[];
    importmap: SharedDependency[];
    appFile: string;
    piletPackage: any;
    appPackage: any;
    emulator: boolean;
    root: string;
}>;
