"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPackage = exports.installDependencies = void 0;
const path_1 = require("path");
const log_1 = require("../log");
const scripts_1 = require("../scripts");
const MemoryStream_1 = require("../MemoryStream");
function runYarnProcess(args, target, output) {
    (0, log_1.log)('generalDebug_0003', 'Starting the Yarn process ...');
    const cwd = (0, path_1.resolve)(process.cwd(), target);
    return (0, scripts_1.runCommand)('yarn', args, cwd, output);
}
function convert(flags) {
    return flags.map((flag) => {
        switch (flag) {
            case '--save-dev':
                return '--dev';
            case '--no-save':
                // unfortunately no (https://github.com/yarnpkg/yarn/issues/1743)
                return '';
            default:
                return flag;
        }
    });
}
function installDependencies(target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runYarnProcess(['install', ...convert(flags)], target, ms);
        (0, log_1.log)('generalDebug_0003', `Yarn install dependencies result: ${ms.value}`);
        return ms.value;
    });
}
exports.installDependencies = installDependencies;
function installPackage(packageRef, target = '.', ...flags) {
    return __awaiter(this, void 0, void 0, function* () {
        const ms = new MemoryStream_1.MemoryStream();
        yield runYarnProcess(['add', packageRef, ...convert(flags)], target, ms);
        (0, log_1.log)('generalDebug_0003', `Yarn install package result: ${ms.value}`);
        return ms.value;
    });
}
exports.installPackage = installPackage;
//# sourceMappingURL=yarn.js.map